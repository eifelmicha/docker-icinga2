/*
 * YOU SHOULD KNOW WHAT YOU'RE DOING!
 *
 * THIS CONFIGURATION FILE MUST BE SYNCRON WITH 'master.d/satellite_services.conf' BE!
 *
 * EXCEPTIONS ARE command_endpoint AND assign RULES
 */

apply Service "icinga-satellite" {
  import "icinga-satellite-service"
  check_command = "icinga"

  max_check_attempts = 2
  check_interval = 30s
  retry_interval = 10s
  enable_notifications = true

  assign where host.name == NodeName
}

apply Service "load" {
  import "icinga-satellite-service"
  check_command = "load"

  check_interval = 45s
  retry_interval = 10s

  assign where host.name == NodeName
}

apply Service for (disk => config in host.vars.disks) {
  import "icinga-satellite-service"
  check_command = "disk"

  check_interval = 45s
  retry_interval = 10s

  vars += config

  assign where host.name == NodeName
}

apply Service "memory" {
  import "icinga-satellite-service"
  check_command = "check_memory"

  check_interval = 45s
  retry_interval = 10s

  assign where host.name == NodeName
}

apply Service "http_" for (http_vhost => config in host.vars.http_vhosts) {
  import "icinga-satellite-service"
  check_command = "http"

  display_name = "HTTP Page"
  notes        = "check against a HTTP Page"

  vars += config

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true

  assign where host.name == NodeName
}

/**
  *  generic HTTPS check for all vhosts in vars.https_vhost
  */
apply Service "https_" for (https_vhost => config in host.vars.https_vhosts) {
  import "icinga-satellite-service"
  check_command = "http"

  display_name = "HTTPS Page"
  notes        = "check against a HTTPS Page"


  vars = {
    "http_uri" = https_vhost
    "http_sni" = true
    "http_ssl" = true
    "http_vhost" = host.name
    "http_address" = host.address
  }

  max_check_attempts = 5
  check_interval = 3m
  retry_interval = 2
  enable_notifications = true

  assign where host.name == NodeName
}

apply Service "ssllabs_grade" {
  import "icinga-satellite-service"
  check_command = "check_ssl_cert"

  display_name = "SSL Labs Grade"
  notes_url    = "https://www.ssllabs.com/ssltest/analyze.html?d=" + host.name

  vars = {
    "ssl_address" = host.name
    "ssl-labs-grade" = host.vars.ssl_grade
  }

  max_check_attempts = 5
  check_interval = 2h
  retry_interval = 2
  enable_notifications = true

  assign where host.name == NodeName && host.vars.ssl_grade
}

apply Service "file_" for ( file => config in host.vars.file_age) {
  import "icinga-satellite-service"
  check_command = "file_age"

  display_name = "File Age for " + file
  notes        = "check a file age"

  vars = {
    "file_age_file" = file
  }

  var warn_time = check_dictionary( config, "warning_time" )
  var crit_time = check_dictionary( config, "critical_time" )
  var warn_size = check_dictionary( config, "warning_size" )
  var crit_size = check_dictionary( config, "critical_size" )

  if( warn_time && crit_time ) {
    vars += {
      "file_age_warning_time"  = config.warning_time
      "file_age_critical_time" = config.critical_time
    }
  }

  if( warn_size && crit_size ) {
    vars += {
      "file_age_warning_size"  = config.warning_size
      "file_age_critical_size" = config.critical_size
    }
  }

/*    "file_age_ignoremissing" = config.ignoremissing*/

  max_check_attempts = 5
  check_interval = 10m
  retry_interval = 2
  enable_notifications = true

  assign where host.name == NodeName
}

